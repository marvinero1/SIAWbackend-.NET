// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using siaw_DBContext.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace siaw_DBContext.Data
{
    public partial class DBContext
    {
        private IDBContextProcedures _procedures;

        public virtual IDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<conectadosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCnDistribucionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Liquidar_Ventas_DMResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Liquidar_Ventas_DM_CasualesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Liquidar_Ventas_DM_Casuales_peso_documentoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<NroItemsProfResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PesoProfResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SIA00001_ConversionMonedaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SIA00002_TipoCambioResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_deslgozarcjtos349Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_deslgozarcjtos353Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_deslgozarcjtos400Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_deslgozarcjtos416Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_deslgozarcjtos744Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_deslgozarcjtos964Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<val_cambio_creditoResult>().HasNoKey().ToView(null);
        }
    }

    public partial class DBContextProcedures : IDBContextProcedures
    {
        private readonly DBContext _context;

        public DBContextProcedures(DBContext context)
        {
            _context = context;
        }

        public virtual async Task<int> Actualizar_CodCliente_Real_FacturasAsync(int? anio, int? mes, OutputParameter<decimal?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "anio",
                    Value = anio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mes",
                    Value = mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Actualizar_CodCliente_Real_Facturas] @anio, @mes, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> arregla_credito_disponibleAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[arregla_credito_disponible]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> asignar_nro_facturaAsync(int? codfactura, int? codalmacen, byte? nrocaja, string id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codfactura",
                    Value = codfactura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nrocaja",
                    Value = nrocaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 10,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[asignar_nro_factura] @codfactura, @codalmacen, @nrocaja, @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> asignar_nro_notacreditoAsync(int? codnotacredito, int? codalmacen, byte? nrocaja, string id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codnotacredito",
                    Value = codnotacredito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nrocaja",
                    Value = nrocaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 10,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[asignar_nro_notacredito] @codnotacredito, @codalmacen, @nrocaja, @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<conectadosResult>> conectadosAsync(string BD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BD",
                    Size = 256,
                    Value = BD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<conectadosResult>("EXEC @returnValue = [dbo].[conectados] @BD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> descrippiezaAsync(string codigo, OutputParameter<string> pieza, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpieza = new SqlParameter
            {
                ParameterName = "pieza",
                Size = 8,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pieza?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codigo",
                    Size = 8,
                    Value = codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpieza,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[descrippieza] @codigo, @pieza OUTPUT", sqlParameters, cancellationToken);

            pieza.SetValue(parameterpieza.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> dm_actualizar_venta_mensual_facturas_parametrosAsync(int? mes_actual, int? anio_actual, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "mes_actual",
                    Value = mes_actual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "anio_actual",
                    Value = anio_actual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[dm_actualizar_venta_mensual_facturas_parametros] @mes_actual, @anio_actual", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCnDistribucionResult>> GetCnDistribucionAsync(string p_codcuenta, int? p_centrocosto, int? p_mes, int? p_anio, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_codcuenta",
                    Size = 30,
                    Value = p_codcuenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "p_centrocosto",
                    Value = p_centrocosto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "p_mes",
                    Value = p_mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "p_anio",
                    Value = p_anio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCnDistribucionResult>("EXEC @returnValue = [dbo].[GetCnDistribucion] @p_codcuenta, @p_centrocosto, @p_mes, @p_anio", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Liquidar_Ventas_DMResult>> Liquidar_Ventas_DMAsync(int? anio, int? mes, OutputParameter<decimal?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "anio",
                    Value = anio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mes",
                    Value = mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Liquidar_Ventas_DMResult>("EXEC @returnValue = [dbo].[Liquidar_Ventas_DM] @anio, @mes, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Liquidar_Ventas_DM_CasualesResult>> Liquidar_Ventas_DM_CasualesAsync(int? anio, int? mes, OutputParameter<decimal?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "anio",
                    Value = anio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mes",
                    Value = mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Liquidar_Ventas_DM_CasualesResult>("EXEC @returnValue = [dbo].[Liquidar_Ventas_DM_Casuales] @anio, @mes, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Liquidar_Ventas_DM_Casuales_peso_documentoResult>> Liquidar_Ventas_DM_Casuales_peso_documentoAsync(int? anio, int? mes, OutputParameter<decimal?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "anio",
                    Value = anio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mes",
                    Value = mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Liquidar_Ventas_DM_Casuales_peso_documentoResult>("EXEC @returnValue = [dbo].[Liquidar_Ventas_DM_Casuales_peso_documento] @anio, @mes, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NroItemsProfResult>> NroItemsProfAsync(string id, int? nroid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 30,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nroid",
                    Value = nroid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NroItemsProfResult>("EXEC @returnValue = [dbo].[NroItemsProf] @id, @nroid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PesoProfResult>> PesoProfAsync(string id, int? nroid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 30,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nroid",
                    Value = nroid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PesoProfResult>("EXEC @returnValue = [dbo].[PesoProf] @id, @nroid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> precioclienteAsync(string cliente, int? almacen, int? tarifa, string item, string nivel_desc_segun_solicitud, string nivel_desc_solicitud, string opcion_nivel_desctos, OutputParameter<double?> preciofinal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpreciofinal = new SqlParameter
            {
                ParameterName = "preciofinal",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = preciofinal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cliente",
                    Size = 20,
                    Value = cliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "almacen",
                    Value = almacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tarifa",
                    Value = tarifa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "item",
                    Size = 16,
                    Value = item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nivel_desc_segun_solicitud",
                    Size = 2,
                    Value = nivel_desc_segun_solicitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nivel_desc_solicitud",
                    Size = 1,
                    Value = nivel_desc_solicitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "opcion_nivel_desctos",
                    Size = 20,
                    Value = opcion_nivel_desctos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterpreciofinal,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[preciocliente] @cliente, @almacen, @tarifa, @item, @nivel_desc_segun_solicitud, @nivel_desc_solicitud, @opcion_nivel_desctos, @preciofinal OUTPUT", sqlParameters, cancellationToken);

            preciofinal.SetValue(parameterpreciofinal.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> preciocliente_seg_nivelAsync(string cliente, int? almacen, int? tarifa, string item, string nivel, OutputParameter<double?> preciofinal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpreciofinal = new SqlParameter
            {
                ParameterName = "preciofinal",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = preciofinal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cliente",
                    Size = 20,
                    Value = cliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "almacen",
                    Value = almacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tarifa",
                    Value = tarifa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "item",
                    Size = 16,
                    Value = item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nivel",
                    Size = 1,
                    Value = nivel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpreciofinal,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[preciocliente_seg_nivel] @cliente, @almacen, @tarifa, @item, @nivel, @preciofinal OUTPUT", sqlParameters, cancellationToken);

            preciofinal.SetValue(parameterpreciofinal.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> preciocondescAsync(string cliente, int? almacen, int? tarifa, string item, int? descuento, string nivel_desc_segun_solicitud, string nivel_desc_solicitud, string opcion_nivel_desctos, OutputParameter<double?> preciofinal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpreciofinal = new SqlParameter
            {
                ParameterName = "preciofinal",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = preciofinal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cliente",
                    Size = 20,
                    Value = cliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "almacen",
                    Value = almacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tarifa",
                    Value = tarifa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "item",
                    Size = 16,
                    Value = item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "descuento",
                    Value = descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nivel_desc_segun_solicitud",
                    Size = 2,
                    Value = nivel_desc_segun_solicitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nivel_desc_solicitud",
                    Size = 1,
                    Value = nivel_desc_solicitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "opcion_nivel_desctos",
                    Size = 20,
                    Value = opcion_nivel_desctos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterpreciofinal,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[preciocondesc] @cliente, @almacen, @tarifa, @item, @descuento, @nivel_desc_segun_solicitud, @nivel_desc_solicitud, @opcion_nivel_desctos, @preciofinal OUTPUT", sqlParameters, cancellationToken);

            preciofinal.SetValue(parameterpreciofinal.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> preciocondesc_seg_nivelAsync(string cliente, int? almacen, int? tarifa, string item, int? descuento, string nivel, OutputParameter<double?> preciofinal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpreciofinal = new SqlParameter
            {
                ParameterName = "preciofinal",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = preciofinal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cliente",
                    Size = 20,
                    Value = cliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "almacen",
                    Value = almacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tarifa",
                    Value = tarifa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "item",
                    Size = 16,
                    Value = item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "descuento",
                    Value = descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nivel",
                    Size = 1,
                    Value = nivel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpreciofinal,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[preciocondesc_seg_nivel] @cliente, @almacen, @tarifa, @item, @descuento, @nivel, @preciofinal OUTPUT", sqlParameters, cancellationToken);

            preciofinal.SetValue(parameterpreciofinal.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> preciolistaAsync(int? tarifa, string item, OutputParameter<double?> preciofinal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpreciofinal = new SqlParameter
            {
                ParameterName = "preciofinal",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = preciofinal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tarifa",
                    Value = tarifa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "item",
                    Size = 16,
                    Value = item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterpreciofinal,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[preciolista] @tarifa, @item, @preciofinal OUTPUT", sqlParameters, cancellationToken);

            preciofinal.SetValue(parameterpreciofinal.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Redondeo_Decimales_SIA_0_decimales_SQLAsync(decimal? minumero, OutputParameter<decimal?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Precision = 18,
                Scale = 9,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "minumero",
                    Precision = 18,
                    Scale = 9,
                    Value = minumero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Redondeo_Decimales_SIA_0_decimales_SQL] @minumero, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Redondeo_Decimales_SIA_5_decimales_SQLAsync(decimal? minumero, OutputParameter<decimal?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Precision = 18,
                Scale = 9,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "minumero",
                    Precision = 18,
                    Scale = 9,
                    Value = minumero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Redondeo_Decimales_SIA_5_decimales_SQL] @minumero, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> reserva_proformasAsync(string codigo, int? codalmacen, OutputParameter<double?> cantidad, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercantidad = new SqlParameter
            {
                ParameterName = "cantidad",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cantidad?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codigo",
                    Size = 8,
                    Value = codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercantidad,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[reserva_proformas] @codigo, @codalmacen, @cantidad OUTPUT", sqlParameters, cancellationToken);

            cantidad.SetValue(parametercantidad.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SIA00001_ConversionMonedaResult>> SIA00001_ConversionMonedaAsync(DateTime? p_fecha, string p_monDesde, string p_monHasta, decimal? p_monto, OutputParameter<decimal?> v_resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterv_resultado = new SqlParameter
            {
                ParameterName = "v_resultado",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = v_resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterv_resultado,
                new SqlParameter
                {
                    ParameterName = "p_fecha",
                    Value = p_fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                new SqlParameter
                {
                    ParameterName = "p_monDesde",
                    Size = 2,
                    Value = p_monDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "p_monHasta",
                    Size = 2,
                    Value = p_monHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "p_monto",
                    Precision = 18,
                    Scale = 2,
                    Value = p_monto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SIA00001_ConversionMonedaResult>("EXEC @returnValue = [dbo].[SIA00001_ConversionMoneda] @v_resultado OUTPUT, @p_fecha, @p_monDesde, @p_monHasta, @p_monto", sqlParameters, cancellationToken);

            v_resultado.SetValue(parameterv_resultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SIA00002_TipoCambioResult>> SIA00002_TipoCambioAsync(string p_monBase, string p_moneda, DateTime? p_fecha, OutputParameter<decimal?> v_resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterv_resultado = new SqlParameter
            {
                ParameterName = "v_resultado",
                Precision = 18,
                Scale = 8,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = v_resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterv_resultado,
                new SqlParameter
                {
                    ParameterName = "p_monBase",
                    Size = 2,
                    Value = p_monBase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "p_moneda",
                    Size = 2,
                    Value = p_moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "p_fecha",
                    Value = p_fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SIA00002_TipoCambioResult>("EXEC @returnValue = [dbo].[SIA00002_TipoCambio] @v_resultado OUTPUT, @p_monBase, @p_moneda, @p_fecha", sqlParameters, cancellationToken);

            v_resultado.SetValue(parameterv_resultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_deslgozarcjtos349Result>> sp_deslgozarcjtos349Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_deslgozarcjtos349Result>("EXEC @returnValue = [dbo].[sp_deslgozarcjtos349]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_deslgozarcjtos353Result>> sp_deslgozarcjtos353Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_deslgozarcjtos353Result>("EXEC @returnValue = [dbo].[sp_deslgozarcjtos353]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_deslgozarcjtos400Result>> sp_deslgozarcjtos400Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_deslgozarcjtos400Result>("EXEC @returnValue = [dbo].[sp_deslgozarcjtos400]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_deslgozarcjtos416Result>> sp_deslgozarcjtos416Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_deslgozarcjtos416Result>("EXEC @returnValue = [dbo].[sp_deslgozarcjtos416]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_deslgozarcjtos744Result>> sp_deslgozarcjtos744Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_deslgozarcjtos744Result>("EXEC @returnValue = [dbo].[sp_deslgozarcjtos744]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_deslgozarcjtos964Result>> sp_deslgozarcjtos964Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_deslgozarcjtos964Result>("EXEC @returnValue = [dbo].[sp_deslgozarcjtos964]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_eliminar_personas_duplicadas_puntualAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_eliminar_personas_duplicadas_puntual]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP001_Cantidad_Reservada_En_Proforma_AlmacenesAsync(string coditem, int? codalmacen, string id_prof, int? nroid_prof, OutputParameter<decimal?> respuesta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrespuesta = new SqlParameter
            {
                ParameterName = "respuesta",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = respuesta?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "coditem",
                    Size = 20,
                    Value = coditem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_prof",
                    Size = 30,
                    Value = id_prof ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nroid_prof",
                    Value = nroid_prof ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrespuesta,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP001_Cantidad_Reservada_En_Proforma_Almacenes] @coditem, @codalmacen, @id_prof, @nroid_prof, @respuesta OUTPUT", sqlParameters, cancellationToken);

            respuesta.SetValue(parameterrespuesta.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP001_Cantidad_Reservada_En_Proforma_TiendasAsync(string coditem, int? codalmacen, string id_prof, int? nroid_prof, OutputParameter<decimal?> respuesta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrespuesta = new SqlParameter
            {
                ParameterName = "respuesta",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = respuesta?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "coditem",
                    Size = 20,
                    Value = coditem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_prof",
                    Size = 30,
                    Value = id_prof ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nroid_prof",
                    Value = nroid_prof ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrespuesta,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP001_Cantidad_Reservada_En_Proforma_Tiendas] @coditem, @codalmacen, @id_prof, @nroid_prof, @respuesta OUTPUT", sqlParameters, cancellationToken);

            respuesta.SetValue(parameterrespuesta.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP001_SaldoReservadoNotasUrgente_Una_proforma_AlmacenesAsync(string coditem, int? codalmacen, string id_prof, int? nroid_prof, OutputParameter<decimal?> respuesta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrespuesta = new SqlParameter
            {
                ParameterName = "respuesta",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = respuesta?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "coditem",
                    Size = 20,
                    Value = coditem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_prof",
                    Size = 30,
                    Value = id_prof ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nroid_prof",
                    Value = nroid_prof ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrespuesta,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP001_SaldoReservadoNotasUrgente_Una_proforma_Almacenes] @coditem, @codalmacen, @id_prof, @nroid_prof, @respuesta OUTPUT", sqlParameters, cancellationToken);

            respuesta.SetValue(parameterrespuesta.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP001_SaldoReservadoNotasUrgente_Una_proforma_TiendasAsync(string coditem, int? codalmacen, string id_prof, int? nroid_prof, OutputParameter<decimal?> respuesta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrespuesta = new SqlParameter
            {
                ParameterName = "respuesta",
                Precision = 18,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = respuesta?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "coditem",
                    Size = 20,
                    Value = coditem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_prof",
                    Size = 30,
                    Value = id_prof ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nroid_prof",
                    Value = nroid_prof ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrespuesta,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP001_SaldoReservadoNotasUrgente_Una_proforma_Tiendas] @coditem, @codalmacen, @id_prof, @nroid_prof, @respuesta OUTPUT", sqlParameters, cancellationToken);

            respuesta.SetValue(parameterrespuesta.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP001_SaldoReservadoNotasUrgentesAsync(string coditem, int? codalmacen, OutputParameter<string> respuesta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrespuesta = new SqlParameter
            {
                ParameterName = "respuesta",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = respuesta?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "coditem",
                    Size = 20,
                    Value = coditem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrespuesta,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP001_SaldoReservadoNotasUrgentes] @coditem, @codalmacen, @respuesta OUTPUT", sqlParameters, cancellationToken);

            respuesta.SetValue(parameterrespuesta.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP001_SaldoReservadoNotasUrgentes_AlmacenesAsync(string coditem, int? codalmacen, OutputParameter<string> respuesta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrespuesta = new SqlParameter
            {
                ParameterName = "respuesta",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = respuesta?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "coditem",
                    Size = 20,
                    Value = coditem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrespuesta,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP001_SaldoReservadoNotasUrgentes_Almacenes] @coditem, @codalmacen, @respuesta OUTPUT", sqlParameters, cancellationToken);

            respuesta.SetValue(parameterrespuesta.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP001_SaldoReservadoNotasUrgentes_TiendasAsync(string coditem, int? codalmacen, OutputParameter<string> respuesta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrespuesta = new SqlParameter
            {
                ParameterName = "respuesta",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = respuesta?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "coditem",
                    Size = 20,
                    Value = coditem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrespuesta,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP001_SaldoReservadoNotasUrgentes_Tiendas] @coditem, @codalmacen, @respuesta OUTPUT", sqlParameters, cancellationToken);

            respuesta.SetValue(parameterrespuesta.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> stock_para_tiendasAsync(string codigo, int? codalmacen, OutputParameter<double?> cantidad, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercantidad = new SqlParameter
            {
                ParameterName = "cantidad",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cantidad?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codigo",
                    Size = 8,
                    Value = codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codalmacen",
                    Value = codalmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercantidad,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[stock_para_tiendas] @codigo, @codalmacen, @cantidad OUTPUT", sqlParameters, cancellationToken);

            cantidad.SetValue(parametercantidad.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TalonarioPorDefectoAsync(int? codvendedor, OutputParameter<string> codtalonario, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercodtalonario = new SqlParameter
            {
                ParameterName = "codtalonario",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = codtalonario?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codvendedor",
                    Value = codvendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercodtalonario,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TalonarioPorDefecto] @codvendedor, @codtalonario OUTPUT", sqlParameters, cancellationToken);

            codtalonario.SetValue(parametercodtalonario.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> unircostosAsync(DateTime? fecha, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fecha",
                    Value = fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[unircostos] @fecha", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<val_cambio_creditoResult>> val_cambio_creditoAsync(string codcliente, decimal? credito, OutputParameter<int?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codcliente",
                    Size = 10,
                    Value = codcliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "credito",
                    Precision = 18,
                    Value = credito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<val_cambio_creditoResult>("EXEC @returnValue = [dbo].[val_cambio_credito] @codcliente, @credito, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> val_contraentregaAsync(int? contra_entrega, int? coddescuento, OutputParameter<int?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "contra_entrega",
                    Value = contra_entrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coddescuento",
                    Value = coddescuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[val_contraentrega] @contra_entrega, @coddescuento, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
